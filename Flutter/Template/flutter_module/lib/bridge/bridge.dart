// Autogenerated from Pigeon (v13.1.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

class NativeBean {
  NativeBean({
    required this.id,
    required this.name,
  });

  int id;

  String name;

  Object encode() {
    return <Object?>[
      id,
      name,
    ];
  }

  static NativeBean decode(Object result) {
    result as List<Object?>;
    return NativeBean(
      id: result[0]! as int,
      name: result[1]! as String,
    );
  }
}

class FlutterBean {
  FlutterBean({
    required this.id,
    required this.name,
  });

  int id;

  String name;

  Object encode() {
    return <Object?>[
      id,
      name,
    ];
  }

  static FlutterBean decode(Object result) {
    result as List<Object?>;
    return FlutterBean(
      id: result[0]! as int,
      name: result[1]! as String,
    );
  }
}

class _FlutterCallNativeCodec extends StandardMessageCodec {
  const _FlutterCallNativeCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is NativeBean) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return NativeBean.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class FlutterCallNative {
  /// Constructor for [FlutterCallNative].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FlutterCallNative({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _FlutterCallNativeCodec();

  Future<NativeBean> loadNativeData(int arg_id) async {
    const String channelName = 'dev.flutter.pigeon.flutter_module.FlutterCallNative.loadNativeData';
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
      channelName,
      codec,
      binaryMessenger: _binaryMessenger,
    );
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id]) as List<Object?>?;
    if (replyList == null) {
      throw _createConnectionError(channelName);
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as NativeBean?)!;
    }
  }
}

class _NativeCallFlutterCodec extends StandardMessageCodec {
  const _NativeCallFlutterCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is FlutterBean) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return FlutterBean.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class NativeCallFlutter {
  static const MessageCodec<Object?> codec = _NativeCallFlutterCodec();

  FlutterBean loadFlutterData(int id);

  static void setup(NativeCallFlutter? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.flutter_module.NativeCallFlutter.loadFlutterData', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.flutter_module.NativeCallFlutter.loadFlutterData was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_id = (args[0] as int?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.flutter_module.NativeCallFlutter.loadFlutterData was null, expected non-null int.');
          try {
            final FlutterBean output = api.loadFlutterData(arg_id!);
            return wrapResponse(result: output);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
